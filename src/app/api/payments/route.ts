import { NextResponse } from "next/server";
import { getDb } from '@/lib/mongodb';

// Basic payments API: records payment entries. In production secure with auth & role checks.
// Suggested SQL (run in Supabase):
// create table if not exists payments (
//   id bigint generated by default as identity primary key,
//   amount numeric(12,2) not null,
//   currency text not null default 'INR',
//   method text not null,
//   status text not null default 'pending',
//   reference text,
//   donor_name text,
//   donor_email text,
//   meta jsonb,
//   created_at timestamptz default now()
// );

export async function POST(request: Request) {
  try {
    const body = await request.json().catch(() => null);
    if (!body) return NextResponse.json({ success: false, message: 'Invalid JSON' }, { status: 400 });
    const { amount, currency = 'INR', method, reference, donor_name, donor_email, status = 'pending', meta } = body;
    if (typeof amount !== 'number' || amount <= 0) return NextResponse.json({ success: false, message: 'Amount must be a positive number' }, { status: 422 });
    if (!method) return NextResponse.json({ success: false, message: 'Payment method is required' }, { status: 422 });

    const doc = {
      amount,
      currency,
      method,
      reference: reference || `PAY-${Date.now()}`,
      donor_name: donor_name || null,
      donor_email: donor_email || null,
      status,
      meta: meta || null,
      created_at: new Date()
    };
    const db = await getDb();
    const result = await db.collection('payments').insertOne(doc);
    return NextResponse.json({ success: true, data: { _id: result.insertedId, ...doc } });
  } catch (e) {
    const message = e instanceof Error ? e.message : 'Unexpected error';
    return NextResponse.json({ success: false, message }, { status: 500 });
  }
}

export async function GET() {
  try {
    const db = await getDb();
    const docs = await db.collection('payments')
      .find({}, { projection: { amount: 1, currency: 1, method: 1, status: 1, reference: 1, donor_name: 1, donor_email: 1, created_at: 1 } })
      .sort({ created_at: -1 })
      .limit(20)
      .toArray();
    return NextResponse.json({ success: true, data: docs });
  } catch (e) {
    const message = e instanceof Error ? e.message : 'Unexpected error';
    return NextResponse.json({ success: false, message }, { status: 500 });
  }
}